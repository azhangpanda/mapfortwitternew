Albuquerque=filter(jaccardHousing, name1.1=="Albuquerque")
View(jaccardHousing)
head(Albuquerque)
Albuquerque=filter(jaccardHousing, name1=="Albuquerque")
plot(Albuquerque$jaccard, Albuquerque$absMedDiff)
Atlanta=filter(jaccardHousing, name1=="Atlanta")
plot(Atlanta$jaccard, Atlanta$absMedDiff)
xyplot( jaccard~ absMedDiff,data=Albuquerque, type=c("p", "l"))
xyplot( jaccard~ absMedDiff,data=Albuquerque)
xyplot( jaccard~ absMedDiff,data=Albuquerque, type=c( "l"))
xyplot( jaccard~ absMedDiff,data=Albuquerque, type=c("p", "r"))
xyplot( jaccard~ absMedDiff,data=Atlanta, type=c("p", "r"))
Atlanta=filter(jaccardHousing, name1=="Atlanta")
xyplot( jaccard~ absMedDiff,data=Atlanta, type=c("p", "r"))
plot(jaccardHousing$jaccard, jaccardHousing$absMedDiff)
xyplot( jaccard~ absMedDiff,data=jaccardHousing, type=c("p", "r"))
xyplot( jaccard~ absMedDiff,data=Austin, type=c("p", "r"))
Austin=filter(jaccardHousing, name1=="Austin")
xyplot( jaccard~ absMedDiff,data=Austin, type=c("p", "r"))
Albuquerque=filter(jaccardHousing, name1=="Albuquerque")
xyplot( jaccard~ absMedDiff,data=Albuquerque, type=c("p", "r"))
Atlanta=filter(jaccardHousing, name1=="Atlanta")
xyplot( jaccard~ absMedDiff,data=Atlanta, type=c("p", "r"))
Austin=filter(jaccardHousing, name1=="Austin")
Deep_South=filter(jaccardHousing, name1=="Atlanta", "Baton Rougue", "Brimingham", "Jackson")
Deep_South=filter(jaccardHousing, name1=="Atlanta", name1=="Baton Rougue", name1=="Brimingham", "Jackson")
Atlanta=filter(jaccardHousing, name1=="Atlanta")
BR=filter(jaccardHousing, name1=="Baton Rougue")
Brimingham=filter(jaccardHousing, name1=="Brimingham")
Jackson=filter(jaccardHousing, name1=="Jackson")
south=rbind(Atlant, BR, Brimingham, Jackson)
south=rbind(Atlanta, BR, Brimingham, Jackson)
head(south)
xyplot( jaccard~ absMedDiff,data=south, type=c("p", "r"))
Chicago=filter(jaccardHousing, name1=="Chicago")
Cincinnati=filter(jaccardHousing, name1=="Cincinnati")
Cleveland=filter(jaccardHousing, name1=="Cleveland")
Columbus=filter(jaccardHousing, name1=="Columbus")
lake=rbind(Chicago, Cincinnati, Cleveland, Columbus)
xyplot( jaccard~ absMedDiff,data=lake, type=c("p", "r"))
Atlanta=filter(jaccardHousing, name1=="Atlanta")
BR=filter(jaccardHousing, name1=="Baton Rougue")
Brimingham=filter(jaccardHousing, name1=="Brimingham")
Jackson=filter(jaccardHousing, name1=="Jackson")
south=rbind(Atlanta, BR, Brimingham, Jackson)
xyplot( jaccard~ absMedDiff,data=south, type=c("p", "r"))
Atlanta=filter(jaccardHousing, name1=="Atlanta")
BR=filter(jaccardHousing, name1=="Baton Rougue")
Brimingham=filter(jaccardHousing, name1=="Brimingham")
Jackson=filter(jaccardHousing, name1=="Jackson")
Alburquerque=filter(jaccardHousing, name1=="Alburquerque")
Austin=filter(jaccardHousing, name1=="Austin")
Baltimore=filter(jaccardHousing, name1=="Baltimore")
Dallas-Ft.worth=filter(jaccardHousing, name1=="Dallas-Ft.worth")
Greensboro=filter(jaccardHousing, name1=="Greensboro")
Houston=filter(jaccardHousing, name1=="Houston")
Jacksonville=filter(jaccardHousing, name1=="Jacksonville")
south=rbind(Atlanta, BR, Brimingham, Jackson, Alburquerque, Austin, Baltimore,Dallas-Ft.worth, Greensboro, Houston, Jacksonville)
south=rbind(Atlanta, BR, Brimingham, Jackson, Alburquerque, Austin, Baltimore, Dallas-Ft.worth, Greensboro, Houston, Jacksonville)
Dallas=filter(jaccardHousing, name1=="Dallas-Ft.worth")
south=rbind(Atlanta, BR, Brimingham, Jackson, Alburquerque, Austin, Baltimore, Dallas, Greensboro, Houston, Jacksonville)
xyplot( jaccard~ absMedDiff,data=south, type=c("p", "r"))
xyplot( jaccard~ absMedDiff,data=jaccardHousing, type=c("p", "r"))
xyplot( jaccard~ absMedDiff,data=south, type=c("p", "r"))
xyplot( jaccard~ absMedDiff,data=jaccardHousing, type=c("p", "r"))
xyplot( jaccard~ absMedDiff,data=lake, type=c("p", "r"))
xyplot( jaccard~ absMedDiff,data=south, type=c("p", "r"))
xyplot( jaccard~ absMedDiff,data=jaccardHousing, type=c("p", "r"), xlim=(0.05, 0.35))
xyplot( jaccard~ absMedDiff,data=jaccardHousing, type=c("p", "r"), xlim=c(0.05, 0.35))
xyplot( jaccard~ absMedDiff,data=jaccardHousing, type=c("p", "r"), ylim=c(0.05, 0.35))
xyplot( jaccard~ absMedDiff,data=jaccardHousing, type=c("p", "r"), ylim=c(0, 0.4))
xyplot( jaccard~ absMedDiff,data=jaccardHousing, type=c("p", "r"), ylim=c(0, 0.4), xlab="Jaccard Index", ylab="the difference between absolute median housing value")
xyplot( jaccard~ absMedDiff,data=jaccardHousing, type=c("p", "r"), ylim=c(0, 0.4), xlab="the difference between absolute median housing values", ylab="Jaccard Index")
xyplot( jaccard~ absMedDiff,data=lake, type=c("p", "r"))
xyplot( jaccard~ absMedDiff,data=south, type=c("p", "r"))
xyplot( jaccard~ absMedDiff,data=jaccardHousing, type=c("p", "r"), ylim=c(0, 0.4), xlab="the difference between absolute median housing values", ylab="Jaccard Index")
shiny::runApp('Documents/academic/fall 14/data science/map for twitter')
shiny::runApp('Documents/academic/fall 14/data science/map for twitter')
shiny::runApp('Documents/academic/fall 14/data science/map for twitter')
shiny::runApp('Documents/academic/fall 14/data science/map for twitter')
setwd("~/Documents/academic/fall 14/data science/map for twitter")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
topic="#MTVStars"
day="11/17/2014"
test1=select(eqTwitter, name, city, longitude, latitude, X.1)
test1$X.1=as.character(test1$X.1)
test2=mutate(test1, d=as.numeric(format(as.Date(test1$X.1,format="%m/%d/%y"),"%d")))
d=as.integer(format(as.Date(day,format="%m/%d/%y"),"%d"))
set=c(d:(d+7))
test2=subset(test2, d %in% set)
test3=filter(test2, name==topic)
test4=group_by(test3, city)%>%summarise(tweets=n())
test5=unique(select(test2, city, longitude, latitude))
test6=merge(x=test4, y=test5, by.x="city", by.y="city", all.x=FALSE)
require(maps)
require(mapproj)
require(RColorBrewer)
map("state", proj="lambert", param=c(33,45), orientation=c(90,0,-100),mar=c(0,4))
projData=mapproject(test6$longitude, test6$latitude, projection="lambert", param=c(33,45), orientation=c(90,0,-100))
head(projData)
projLong=projData$x
projLat=projData$y
require(RColorBrewer)
quantile(test6$tweets,seq(0,1,by=.25))
col=colorRampPalette(c(brewer.pal(9,"PuBu")))
col2=col(8)[as.numeric(cut(test6$tweets, breaks=quantile(test6$tweets, seq(0,1,length=8))))]
points(projLong,projLat,col=col2, pch=19)
#pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot(rnorm(100))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
topic="#MTVStars"
day="11/17/2014"
test1=select(eqTwitter, name, city, longitude, latitude, X.1)
test1$X.1=as.character(test1$X.1)
test2=mutate(test1, d=as.numeric(format(as.Date(test1$X.1,format="%m/%d/%y"),"%d")))
d=as.integer(format(as.Date(day,format="%m/%d/%y"),"%d"))
set=c(d:(d+7))
test2=subset(test2, d %in% set)
test3=filter(test2, name==topic)
test4=group_by(test3, city)%>%summarise(tweets=n())
test5=unique(select(test2, city, longitude, latitude))
test6=merge(x=test4, y=test5, by.x="city", by.y="city", all.x=FALSE)
require(maps)
require(mapproj)
require(RColorBrewer)
map("state", proj="lambert", param=c(33,45), orientation=c(90,0,-100),mar=c(0,4))
projData=mapproject(test6$longitude, test6$latitude, projection="lambert", param=c(33,45), orientation=c(90,0,-100))
head(projData)
projLong=projData$x
projLat=projData$y
require(RColorBrewer)
quantile(test6$tweets,seq(0,1,by=.25))
col=colorRampPalette(c(brewer.pal(9,"PuBu")))
col2=col(8)[as.numeric(cut(test6$tweets, breaks=quantile(test6$tweets, seq(0,1,length=8))))]
points(projLong,projLat,col=col2, pch=19)
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(maps)
library(mapproj)
counties <- readRDS("data/counties.rds")
source("helpers.R")
shinyServer(
function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent White" = counties$white,
"Percent Black" = counties$black,
"Percent Hispanic" = counties$hispanic,
"Percent Asian" = counties$asian)
color <- switch(input$var,
"Percent White" = "darkgreen",
"Percent Black" = "black",
"Percent Hispanic" = "darkorange",
"Percent Asian" = "darkviolet")
legend <- switch(input$var,
"Percent White" = "% White",
"Percent Black" = "% Black",
"Percent Hispanic" = "% Hispanic",
"Percent Asian" = "% Asian")
percent_map(var = data,
color = color,
legend.title = legend,
max = input$range[2],
min = input$range[1])
})
}
)
source("helpers.R")
runapp("apptest")
runApp("apptest")
runApp("apptest")
shiny::runApp('~/Desktop/apptest')
shiny::runApp('~/Desktop/apptest')
install.packages(c("maps", "mapproj"))
install.packages(c("maps", "mapproj"))
shiny::runApp()
shiny::runApp()
shiny::runApp('~/Desktop/apptest')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('~/Desktop/apptest')
shiny::runApp('~/Desktop/apptest')
shiny::runApp('~/Desktop/apptest')
shiny::runApp('~/Desktop/apptest')
shiny::runApp('~/Desktop/apptest')
shiny::runApp('~/Desktop/apptest')
shiny::runApp('~/Desktop/apptest')
shiny::runApp('~/Desktop/apptest')
shiny::runApp('~/Desktop/apptest')
shiny::runApp('~/Desktop/apptest')
shiny::runApp('~/Desktop/apptest')
shiny::runApp('~/Desktop/apptest')
shiny::runApp('~/Desktop/apptest')
shiny::runApp('~/Desktop/apptest')
topic="#MTVStars"
day="11/17/2014"
test1=select(eqTwitter, name, city, longitude, latitude, X.1)
test1$X.1=as.character(test1$X.1)
test2=mutate(test1, d=as.numeric(format(as.Date(test1$X.1,format="%m/%d/%y"),"%d")))
d=as.integer(format(as.Date(day,format="%m/%d/%y"),"%d"))
set=c(d:(d+7))
test2=subset(test2, d %in% set)
test3=filter(test2, name==topic)
test4=group_by(test3, city)%>%summarise(tweets=n())
test5=unique(select(test2, city, longitude, latitude))
test6=merge(x=test4, y=test5, by.x="city", by.y="city", all.x=FALSE)
require(maps)
require(mapproj)
require(RColorBrewer)
map("state", proj="lambert", param=c(33,45), orientation=c(90,0,-100),mar=c(0,4))
projData=mapproject(test6$longitude, test6$latitude, projection="lambert", param=c(33,45), orientation=c(90,0,-100))
head(projData)
projLong=projData$x
projLat=projData$y
require(RColorBrewer)
quantile(test6$tweets,seq(0,1,by=.25))
col=colorRampPalette(c(brewer.pal(9,"PuBu")))
col2=col(8)[as.numeric(cut(test6$tweets, breaks=quantile(test6$tweets, seq(0,1,length=8))))]
points(projLong,projLat,col=col2, pch=19)
pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
legend.gradient(pnts, col2, c("low", "hight") )
require(plotrix)
install.packages("plotrix")
require(plotrix)
pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
legend.gradient(pnts, col2, c("low", "hight") )
legend("bottomleft", legend = topic,
fill = shades[c(1, 25, 50, 75, 100)],
title = topic)
legend("bottomleft", legend = topic,
title = topic)
)
legend("bottomleft", legend = topic,
)
legend("bottomleft", legend = col2,
title = topic)
col=colorRampPalette(c(brewer.pal(9,"OrRd")))
col2=col(8)[as.numeric(cut(test6$tweets, breaks=quantile(test6$tweets, seq(0,1,length=8))))]
points(projLong,projLat,col=col2, pch=19)
require(plotrix)
pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
legend.gradient(pnts, col2, c("low", "hight") )
require(SDMTools)
install.packages("SDMTools")
require(SDMTools)
pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
legend.gradient(pnts, col2, c("low", "hight") )
quantile(test6$tweets,seq(0,1,by=.25))
a=quantile(test6$tweets,seq(0,1,by=.25))
col=colorRampPalette(c(brewer.pal(9,"OrRd")))
col2=col(8)[as.numeric(cut(test6$tweets, breaks=quantile(test6$tweets, seq(0,1,length=8))))]
points(projLong,projLat,col=col2, pch=19)
require(SDMTools)
pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
legend.gradient(pnts, a, c("low", "hight") )
require(RColorBrewer)
quantile(test6$tweets,seq(0,1,by=.25))
col=colorRampPalette(c(brewer.pal(9,"OrRd")))
col2=col(8)[as.numeric(cut(test6$tweets, breaks=quantile(test6$tweets, seq(0,1,length=8))))]
points(projLong,projLat,col=col2, pch=19)
require(SDMTools)
pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
legend.gradient(pnts, quantile(test6$tweets,seq(0,1,by=.25)), c("low", "hight") )
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
points(projLong,projLat,col=col2, pch=19, city)
topic="#MTVStars"
day="11/17/2014"
test1=select(eqTwitter, name, city, longitude, latitude, X.1)
test1$X.1=as.character(test1$X.1)
test2=mutate(test1, d=as.numeric(format(as.Date(test1$X.1,format="%m/%d/%y"),"%d")))
d=as.integer(format(as.Date(day,format="%m/%d/%y"),"%d"))
set=c(d:(d+7))
test2=subset(test2, d %in% set)
test3=filter(test2, name==topic)
test4=group_by(test3, city)%>%summarise(tweets=n())
test5=unique(select(test2, city, longitude, latitude))
test6=merge(x=test4, y=test5, by.x="city", by.y="city", all.x=FALSE)
require(maps)
require(mapproj)
require(RColorBrewer)
map("state", proj="lambert", param=c(33,45), orientation=c(90,0,-100),mar=c(0,4))
projData=mapproject(test6$longitude, test6$latitude, projection="lambert", param=c(33,45), orientation=c(90,0,-100))
head(projData)
projLong=projData$x
projLat=projData$y
head(projData)
require(RColorBrewer)
quantile(test6$tweets,seq(0,1,by=.25))
col=colorRampPalette(c(brewer.pal(9,"OrRd")))
points(projLong,projLat,col=col2, pch=19)
points(projLong,projLat,col=col2, pch=19, city)
points(projLong,projLat,col=col2, pch=19)
require(SDMTools)
pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
legend.gradient(pnts, quantile(test6$tweets,seq(0,1,by=.25)), c("low", "hight") )
legend.gradient(pnts, a, c("low", "hight") )
legend.gradient(pnts, col, c("low", "hight") )
require(SDMTools)
pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
legend.gradient(pnts, col, c("low", "hight") )
legend.gradient(pnts, col2, c("low", "hight") )
require(SDMTools)
pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
legend.gradient(pnts, col2, c("low", "hight") )
pnts= cbind(x =c(8,9,9,8), y =c(1.0,1.0,0.8,0.8))
legend.gradient(pnts, col2, c("low", "hight") )
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
#topic="Happy Thanksgiving"
#day="11/17/2014"
test1=select(eqTwitter, name, city, longitude, latitude, X.1)
test1$X.1=as.character(test1$X.1)
test2=mutate(test1, d=as.numeric(format(as.Date(test1$X.1,format="%m/%d/%y"),"%d")))
d=as.integer(format(as.Date(day,format="%m/%d/%y"),"%d"))
set=c(d:(d+7))
test2=subset(test2, d %in% set)
test3=filter(test2, name==topic)
test4=group_by(test3, city)%>%summarise(tweets=n())
test5=unique(select(test2, city, longitude, latitude))
test6=merge(x=test4, y=test5, by.x="city", by.y="city", all.x=FALSE)
require(maps)
require(mapproj)
require(RColorBrewer)
map("state", proj="lambert", param=c(33,45), orientation=c(90,0,-100),mar=c(0,4))
projData=mapproject(test6$longitude, test6$latitude, projection="lambert", param=c(33,45), orientation=c(90,0,-100))
head(projData)
projLong=projData$x
projLat=projData$y
require(RColorBrewer)
a=quantile(test6$tweets,seq(0,1,by=.25))
col=colorRampPalette(c(brewer.pal(9,"OrRd")))
col2=col(8)[as.numeric(cut(test6$tweets, breaks=quantile(test6$tweets, seq(0,1,length=8))))]
points(projLong,projLat,col=col2, pch=19)
require(SDMTools)
pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
legend.gradient(pnts, col2, c("low", "hight") )
require(plotGoogleMaps)
m = plotGoogleMaps(b, filename = "myMap.htm", zcol = "nameLength",
mapTypeId = "ROADMAP")
install.packages("plotGoogleMaps")
require(plotGoogleMaps)
m = plotGoogleMaps(b, filename = "myMap.htm", zcol = "nameLength",
mapTypeId = "ROADMAP")
col2=col(8)[as.numeric(cut(test6$tweets, breaks=quantile(test6$tweets, seq(0,1,length=8))))]
b=points(projLong,projLat,col=col2, pch=19)
require(SDMTools)
pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
legend.gradient(pnts, col2, c("low", "hight") )
require(plotGoogleMaps)
m = plotGoogleMaps(b, filename = "myMap.htm", zcol = "tweets",mapTypeId = "ROADMAP")
shiny::runApp()
coordinates(test6)=c("longitude", "latitude")
proj4string(test6)=CRS("+proj=longlat")
spplot(test6, zcol="city")
head(test6)
test6
require(maps)
require(mapproj)
require(RColorBrewer)
map("state", proj="lambert", param=c(33,45), orientation=c(90,0,-100),mar=c(0,4))
projData=mapproject(test6$longitude, test6$latitude, projection="lambert", param=c(33,45), orientation=c(90,0,-100))
head(projData)
projLong=projData$x
projLat=projData$y
require(RColorBrewer)
a=quantile(test6$tweets,seq(0,1,by=.25))
col=colorRampPalette(c(brewer.pal(9,"OrRd")))
col2=col(8)[as.numeric(cut(test6$tweets, breaks=quantile(test6$tweets, seq(0,1,length=8))))]
b=points(projLong,projLat,col=col2, pch=19)
require(SDMTools)
pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
legend.gradient(pnts, col2, c("low", "hight") )
#day="11/17/2014"
test1=select(eqTwitter, name, city, longitude, latitude, X.1)
test1$X.1=as.character(test1$X.1)
test2=mutate(test1, d=as.numeric(format(as.Date(test1$X.1,format="%m/%d/%y"),"%d")))
d=as.integer(format(as.Date(day,format="%m/%d/%y"),"%d"))
set=c(d:(d+7))
topic="Happy Thanksgiving"
day="11/17/2014"
test1=select(eqTwitter, name, city, longitude, latitude, X.1)
test1$X.1=as.character(test1$X.1)
test2=mutate(test1, d=as.numeric(format(as.Date(test1$X.1,format="%m/%d/%y"),"%d")))
require(mosai)
require(mosaic)
topic="Happy Thanksgiving"
day="11/17/2014"
test1=select(eqTwitter, name, city, longitude, latitude, X.1)
twitter=read.csv("data/eqTwitter")
topic="Happy Thanksgiving"
day="11/17/2014"
test1=select(eqTwitter, name, city, longitude, latitude, X.1)
test1=select(twitter, name, city, longitude, latitude, X.1)
test1$X.1=as.character(test1$X.1)
test2=mutate(test1, d=as.numeric(format(as.Date(test1$X.1,format="%m/%d/%y"),"%d")))
d=as.integer(format(as.Date(day,format="%m/%d/%y"),"%d"))
set=c(d:(d+7))
test2=subset(test2, d %in% set)
test3=filter(test2, name==topic)
test4=group_by(test3, city)%>%summarise(tweets=n())
test5=unique(select(test2, city, longitude, latitude))
test6=merge(x=test4, y=test5, by.x="city", by.y="city", all.x=FALSE)
coordinates(test6)=c("longitude", "latitude")
test4=summarise(group_by(test3, city), tweets=n())
require(dplyr)
test4=summarise(group_by(test3, city), tweets=n())
detach("package:dplyr", unload=TRUE)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
test4=summarise(group_by(test3, city), tweets=n())
detach("package:plyr", unload=TRUE)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
test1$X.1=as.character(test1$X.1)
test2=mutate(test1, d=as.numeric(format(as.Date(test1$X.1,format="%m/%d/%y"),"%d")))
d=as.integer(format(as.Date(day,format="%m/%d/%y"),"%d"))
set=c(d:(d+7))
test2=subset(test2, d %in% set)
test3=filter(test2, name==topic)
topic=#MTVStars"
day="11/17/2014"
test1=select(twitter, name, city, longitude, latitude, X.1)
test1$X.1=as.character(test1$X.1)
test2=mutate(test1, d=as.numeric(format(as.Date(test1$X.1,format="%m/%d/%y"),"%d")))
d=as.integer(format(as.Date(day,format="%m/%d/%y"),"%d"))
set=c(d:(d+7))
test2=subset(test2, d %in% set)
test3=filter(test2, name==topic)
test4=summarise(group_by(test3, city), tweets=n())
topic="#MTVStars"
day="11/17/2014"
test1=select(twitter, name, city, longitude, latitude, X.1)
test1$X.1=as.character(test1$X.1)
test2=mutate(test1, d=as.numeric(format(as.Date(test1$X.1,format="%m/%d/%y"),"%d")))
d=as.integer(format(as.Date(day,format="%m/%d/%y"),"%d"))
set=c(d:(d+7))
test2=subset(test2, d %in% set)
test3=filter(test2, name==topic)
test4=summarise(group_by(test3, city), tweets=n())
test5=unique(select(test2, city, longitude, latitude))
test6=merge(x=test4, y=test5, by.x="city", by.y="city", all.x=FALSE)
View(test6)
coordinates(test6)=c("longitude", "latitude")
require(rgdal)
proj.lcc = CRS("+proj=lcc +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")
city.proj=spTransform(test6, proj.lcc)
require(sp)
coordinates(test6)=c("longitude", "latitude")
proj4string(test6)=CRS("+proj=longlat")
spplot(city.proj, zcol="city")
city.proj=spTransform(test6, proj.lcc)
spplot(city.proj, zcol="city")
test6=merge(x=test4, y=test5, by.x="city", by.y="city", all.x=FALSE)
require(maps)
require(mapproj)
require(RColorBrewer)
map("state", proj="lambert", param=c(33,45), orientation=c(90,0,-100),mar=c(0,4))
projData=mapproject(test6$longitude, test6$latitude, projection="lambert", param=c(33,45), orientation=c(90,0,-100))
head(projData)
projLong=projData$x
projLat=projData$y
require(RColorBrewer)
a=quantile(test6$tweets,seq(0,1,by=.25))
col=colorRampPalette(c(brewer.pal(9,"OrRd")))
col2=col(8)[as.numeric(cut(test6$tweets, breaks=quantile(test6$tweets, seq(0,1,length=8))))]
b=points(projLong,projLat,col=col2, pch=19)
require(SDMTools)
pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
legend.gradient(pnts, col2, c("low", "hight") )
}
shiny::runApp()
projData=mapproject(test6$longitude, test6$latitude, test6$city, projection="lambert", param=c(33,45), orientation=c(90,0,-100))
points(projLong,projLat,col=col2, pch=19, bg="light blue")
require(SDMTools)
pnts= cbind(x =c(0.8,0.9,0.9,0.8), y =c(1.0,1.0,0.8,0.8))
points(projLong,projLat,col=col2, pch=19, bg="grey")
points(projLong,projLat,col=col2, pch=19, bg="grey", cex=test6$city)
a=quantile(test6$tweets,seq(0,1,by=.25))
a
shiny::runApp()
